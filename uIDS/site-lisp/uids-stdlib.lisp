(require string)
(require ascii)
(require atoi)
(require stdio)
(require simple-memory-allocator)
(require types)
(require uids-ascii)
(require uids-atoi)

(in-package posix)

(defparameter *cbloc-b* nil
  "the starting address of the cbloc-b arena")

(defparameter *cbloc-tolower* nil
  "the starting address of the cbloc-tolower arena")

(defparameter *cbloc-toupper* nil
  "the starting address of the cbloc-toupper arena")

(defun bzero (p n)
  "zero out a buffer of memory"
  (declare (external "bzero"))
  (let ((i 0))
    (while (< i n)
      (memory-write p 0)
      (incr p)
      (incr i))))

(defun rand ()
  (declare (external "rand"))
  (uids-ocaml-rand))

(defun sqrt (x)
  (declare (external "sqrt"))
  (uids-ocaml-sqrt x))

(defun log (x)
  (declare (external "log"))
  (uids-ocaml-log x))

(defun floor (x)
  (declare (external "floor"))
  (uids-ocaml-floor x))

(defun round (x)
  (declare (external "round"))
  (uids-ocaml-round x))

(defun uids-ascii-is-alpha (c)
  (or (and (>= c 0x41) (<= c 0x5a)) (and (>= c 0x61) (<= c 0x7a))))

(defun ctype-b-loc ()
  (declare (external "__ctype_b_loc"))
  (when (not *cbloc-b*)
    (let ((p (malloc (sizeof ptr_t)))
          (n (+ 129 255))
          (table (malloc (* (sizeof short) n)))
          (start (ptr+ short table 129))
          (i 0))
      (bzero table (* (sizeof short) n))
      (uids-ocaml-debug table)
      (write-word ptr_t p start)
      (while (< i n)
        (let ((q (ptr+ short table i))
              (mask 0))
          (when (>= i 129)
            (let ((j (cast char (- i 129))))
              (uids-ocaml-debug j)
              (uids-ocaml-debug (ascii-is-alphanum j))
              (when (ascii-is-alpha j)
                (set mask (logor mask 0x400)))
              (when (ascii-is-digit j)
                (set mask (logor mask 0x800)))
              (when (ascii-is-alphanum j)
                (set mask (logor mask 0x8)))
              (when (ascii-is-whitespace j)
                (set mask (logor mask 0x2000)))
              (when (ascii-is-print j)
                (set mask (logor mask 0x4000)))
              (uids-ocaml-debug mask)
              (uids-ocaml-debug q)
              (write-word short q mask)))
          (incr i)))
      (set *cbloc-b* p)))
    *cbloc-b*)

;; (uids-ocaml-debug j)

(defun ctype-tolower-loc ()
  (declare (external "__ctype_tolower_loc"))
  (when (not *cbloc-tolower*)
    ;; (uids-ocaml-debug 0xfabc0de)
    ;; (uids-ocaml-debug (sizeof int32_t))
    (let ((p (malloc (sizeof ptr_t)))
          (n (+ 129 255))
          (table (malloc (* (sizeof int32_t) n)))
          (start (ptr+ char table 129))
          (i 0))
      (bzero table (* (sizeof int32_t) n))
      (write-word ptr_t p start)
      (while (< i n)
	;; (uids-ocaml-debug i)
        (let ((q (ptr+ int32_t table i))
              (mask 0))
          (when (>= i 129)
            (let ((j (cast char (- i 129))))
	      (write-word int32_t q (ascii-to-lower j))))
          (incr i)))
      (set *cbloc-tolower* p)))
    ;; (uids-ocaml-debug 0xfabc1de)
    ;; (uids-ocaml-debug *cbloc-tolower*)
    *cbloc-tolower*)

(defun ctype-toupper-loc ()
  (declare (external "__ctype_toupper_loc"))
  (when (not *cbloc-toupper*)
    (let ((p (malloc (sizeof ptr_t)))
          (n (+ 129 255))
          (table (malloc (* (sizeof char) n)))
          (start (ptr+ char table 129))
          (i 0:64))
      (bzero table (* (sizeof char) n))
      (write-word ptr_t p start)
      (while (< i n)
        (let ((q (ptr+ char table i))
              (mask 0))
          (when (>= i 129)
            (let ((j (cast char (- i 129))))
	      (memory-write q (ascii-to-upper j))))
          (incr i)))
      (set *cbloc-toupper* p)))
    *cbloc-toupper*)

(defun uids-strtol (s endptr base)
  (declare (external "strtol"))
  (let ((v 0))
    (while (and (> (cast ptr_t (memory-read s)) 0)
                (not (= (cast ptr_t (memory-read s)) 0xa)))
      (set v (+ (* v base)  (uids-atoi-read-digit s)))
      (incr s))
    (when endptr
        (write-word ptr_t (cast ptr_t endptr) s))
    (cast int v)))


