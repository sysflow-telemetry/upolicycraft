(require types)
(require ascii)
(require pointers)
(require simple-memory-allocator)
(require stdio)
(require stdlib)
(require string)

(defmacro skip-all (pred s)
  (while (pred (memory-read s)) (incr s)))

(defun atoi-prefix (s)
  (or (ascii-special s) (ascii-whitespace s)))

(defun atoi-read-digit (s)
  (cast ptr_t (- (memory-read s) ?0)))

(defun read-ascii-word (s)
  (skip-all atoi-prefix s)
  (let ((v 0)
        (sign (ascii-sign (memory-read s))))
    (while (ascii-digit (memory-read s))
      (set v (+ (* v 10) (atoi-read-digit s)))
      (incr s))
    (* sign v)))

(defmacro make-converter (type s)
  (cast type (read-ascii-word s)))

(defun atoi (s)
  (make-converter int s))

(defun my-atoi-read-digit (s)
  (cast int (- (memory-read s) ?0)))

(defun uids-atoi (s)
  (declare (external "atoi"))
  (let ((v 0))
    (while (> (cast ptr_t (memory-read s)) 0)
      (set v (+ (* v 10)  (atoi-read-digit s)))
      (incr s))
    (cast int v)))

(defun htons (v)
  (declare (external "htons"))
  v)

;; Always return success
(defun apr-app-initialize (argc argv env)
  (declare (external "apr_app_initialize"))
  0)

(defun apr-pool-create-ex (newpool parent abortfn allocator)
  (declare (external "apr_pool_create_ex"))
  0)

(defun apr-palloc (p sz)
  (declare (external "apr_palloc"))
  (malloc sz))

(defun apr-generate-random-bytes (buf l)
  (declare (external "apr_generate_random_bytes"))
  0)

(defun apr-random-insecure-ready (r)
  (declare (external "apr_random_insecure_ready"))
  0)

(defun apr-pstrdup (p s)
  (declare (external "apr_pstrdup"))
  (strdup s))

(defconstant default-hash-size 1024 "The default size of a hash table")
(defconstant use-strlen -1 "Denotes that keys are strings")

(defmacro triple-size ()
  (+ (sizeof ptr_t) (sizeof int64_t) (sizeof ptr_t)))

(defun assert-fail (assertion file line func)
   (declare (external "__assert_fail"))
   (fputs assertion *standard-error*)
   (fputs file *standard-error*)
   (fputs line *standard-error*)
   (fputs func *standard-error*))

(defun apr-hash-make (p)
  (declare (external "apr_hash_make"))
  (malloc 128))

(defun shl (x p)
    (let ((x' x)
          (i 0))
      (while (< i p)
        (set x' (* x' 2:64))
        (incr i))
        x'))

(defun shr (x p)
    (let ((x' x)
          (i 0))
      (while (< i p)
        (set x' (/ x' 2:64))
        (incr i))
      x'))

(defun read-int64 (p)
   (let ((v 0:64)
         (i 0))
     (while (< i 8)
       (let ((x (cast ptr_t (memory-read (+ p i)))))
         (set v (+ (shl x (cast ptr_t (* i 8))) v))
         (incr i)))
     v))

(defun write-int64 (p v)
   (fputc 0x57 *standard-error*)
   (fputc 0xa *standard-error*)
   (let ((i 0)
         (v' v))
       (while (< i 8)
         (let ((q (+ p i))
               (b  (cast char (modulo v' 256))))
           (set v' (shr v' 8))
           (memory-write q b)
           (incr i)))))

(defun modulo (p q)
  (let ((d (/ p q)))
    (- p (* d q))))

(defun dump-value (n c)
  (let ((x n))
         (while (> x 0)
           (fputc c *standard-error*)
           (decr x))
           (fputc 0xa *standard-error*)))

(defun apr-hash-get (ht key klen)
  (declare (external "apr_hash_get"))
  (malloc 128))

(defun apr-hash-set (ht key klen val)
  (declare (external "apr_hash_set")))

(defun apr-array-push (arr)
  (declare (external "apr_array_push"))
  (malloc 1024))

(defun apr-array-pop (arr)
  (declare (external "apr_array_pop"))
  (malloc 1024))

  ;(dump-value 1 0x47)
  ;(let ((p ht)
  ;      (q (+ ht (sizeof int64_t)))
  ;      (n (read-word ptr_t p))
  ;      (i 0)
  ;      (found 1))
  ;  (fputc (cast char (+ 0x30 n)) *standard-error*)
  ;  (fputc 0xa *standard-error*)
  ;  (while (and (< i n) found)
  ;    (dump-value i 0x43)
  ;    (let ((elt (+ q (* i (triple-size))))
  ;          (key' (read-word ptr_t elt))
  ;          (keylen (read-word int64_t (+ elt (sizeof ptr_t)))))
  ;          (when (and key key')
  ;            (fputs key' *standard-error*)
  ;            (fputs key *standard-error*))
  ;          (if (and (= keylen 0xffffffffffffffff)
  ;                   (= klen 0xffffffffffffffff))
  ;            (let ((x 0))
  ;              (dump-value 1 0x58)
  ;              (set found 0))
  ;            0)
  ;          (if (and (not (= keylen 0xffffffffffffffff))
  ;                   (= keylen klen)
  ;                   (= key key'))
  ;            (let ((x 0))
  ;              (dump-value 1 0x59)
  ;              (set found 0))
  ;            0)
  ;           (incr i)))
  ;  (if (= found 0)
  ;    (let ((elt (+ q (* i (triple-size))))
  ;          (val (+ elt (sizeof ptr_t) (sizeof ptr_t))))
  ;      (dump-value i 0x41)
  ;      (read-word ptr_t val))
  ;    0)))

;; (if (= keylen 0xffffffffffffffff)
;;               (set found
;;               (set found (memcmp key' key keylen)))

  ;;(let ((p ht)
  ;;      (n (read-word int64_t p)))
  ;;     (dump-value 1 0x53)
  ;;     (fputc (cast char (+ 0x30 n)) *standard-error*)
  ;;     (fputc 0xa *standard-error*)
  ;;     (write-word int64_t p n)
  ;;     0))

       ;;(q (ptr+ ptr_t p 1))
       ;;(dump-value 1 0x53)
       ;;(if (> n default-hash-size)
       ;;  (let ((x 0))
       ;;    (exit 1))
       ;;  (let ((dst (+ q (* n (triple-size)))))
       ;;    (fputc (cast char (+ 0x30 n)) *standard-error*)
       ;;    (fputc 0xa *standard-error*)
       ;;    ;;(write-word ptr_t dst key)
       ;;    ;;(write-word int64_t (+ dst (sizeof ptr_t)) klen)
       ;;    ;;(write-word ptr_t (+ dst (* 2 (sizeof ptr_t))) val)
       ;;    (write-word int64_t p n)))))

(defun atol  (s) (make-converter long s))
(defun atoll (s) (make-converter long-long s))
